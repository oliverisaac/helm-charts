apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: longhorn
  namespace: {{ .Values.argocd.namespace }}
spec:
  destination:
    namespace: {{ .Values.longhorn.argocd.namespace }}
    server: https://kubernetes.default.svc
  project: default
  syncPolicy:
    automated:
      prune: {{ .Values.longhorn.argocd.prune }}
      selfHeal: {{ .Values.longhorn.argocd.selfHeal }}
    syncOptions:
    {{ if .Values.longhorn.argocd.createNamespace }}
    - CreateNamespace=true
    {{- end }}
  source:
    chart: longhorn
    repoURL: https://charts.longhorn.io
    targetRevision: '1.5.*'
    helm:
      parameters:
      - name: "longhorn.server.ingress.hosts[0].host"
        value: {{ .Values.longhorn.hostname | quote }}
      values: |-
        # Default values for longhorn.
        # This is a YAML-formatted file.
        # Declare variables to be passed into your templates.
        global:
          cattle:
            windowsCluster:
              # Enable this to allow Longhorn to run on the Rancher deployed Windows cluster
              enabled: false

        networkPolicies:
          enabled: false

        service:
          ui:
            type: ClusterIP
            nodePort: null
          manager:
            type: ClusterIP
            nodePort: ""
            loadBalancerIP: ""
            loadBalancerSourceRanges: ""

        persistence:
          defaultClass: true
          defaultFsType: ext4
          defaultMkfsParams: ""
          defaultClassReplicaCount: 3
          defaultDataLocality: disabled # best-effort otherwise
          reclaimPolicy: Delete
          migratable: false
          recurringJobSelector:
            enable: false
            jobList: []
          backingImage:
            enable: false
            name: ~
            dataSourceType: ~
            dataSourceParameters: ~
            expectedChecksum: ~
          defaultNodeSelector:
            enable: false # disable by default
            selector: ""
          removeSnapshotsDuringFilesystemTrim: ignored # "enabled" or "disabled" otherwise

        csi:
          kubeletRootDir: ~
          attacherReplicaCount: ~
          provisionerReplicaCount: ~
          resizerReplicaCount: ~
          snapshotterReplicaCount: ~

        defaultSettings:
          backupTarget: ~
          backupTargetCredentialSecret: ~
          allowRecurringJobWhileVolumeDetached: ~
          createDefaultDiskLabeledNodes: ~
          defaultDataPath: /data
          defaultDataLocality: ~
          replicaSoftAntiAffinity: ~
          replicaAutoBalance: ~
          storageOverProvisioningPercentage: ~
          storageMinimalAvailablePercentage: ~
          upgradeChecker: ~
          defaultReplicaCount: ~
          defaultLonghornStaticStorageClass: ~
          backupstorePollInterval: ~
          failedBackupTTL: ~
          restoreVolumeRecurringJobs: ~
          recurringSuccessfulJobsHistoryLimit: ~
          recurringFailedJobsHistoryLimit: ~
          supportBundleFailedHistoryLimit: ~
          taintToleration: ~
          systemManagedComponentsNodeSelector: ~
          priorityClass: ~
          autoSalvage: ~
          autoDeletePodWhenVolumeDetachedUnexpectedly: ~
          disableSchedulingOnCordonedNode: ~
          replicaZoneSoftAntiAffinity: ~
          nodeDownPodDeletionPolicy: ~
          nodeDrainPolicy: ~
          replicaReplenishmentWaitInterval: ~
          concurrentReplicaRebuildPerNodeLimit: ~
          concurrentVolumeBackupRestorePerNodeLimit: ~
          disableRevisionCounter: ~
          systemManagedPodsImagePullPolicy: ~
          allowVolumeCreationWithDegradedAvailability: ~
          autoCleanupSystemGeneratedSnapshot: ~
          concurrentAutomaticEngineUpgradePerNodeLimit: ~
          backingImageCleanupWaitInterval: ~
          backingImageRecoveryWaitInterval: ~
          guaranteedEngineManagerCPU: ~
          guaranteedReplicaManagerCPU: ~
          kubernetesClusterAutoscalerEnabled: ~
          orphanAutoDeletion: ~
          storageNetwork: ~
          deletingConfirmationFlag: ~
          engineReplicaTimeout: ~
          snapshotDataIntegrity: ~
          snapshotDataIntegrityImmediateCheckAfterSnapshotCreation: ~
          snapshotDataIntegrityCronjob: ~
          removeSnapshotsDuringFilesystemTrim: ~
          fastReplicaRebuildEnabled: ~
          replicaFileSyncHttpClientTimeout: ~
          logLevel: ~
          backupCompressionMethod: ~
          backupConcurrentLimit: ~
          restoreConcurrentLimit: ~
          v2DataEngine: ~
          offlineReplicaRebuilding: ~
        privateRegistry:
          createSecret: ~
          registryUrl: ~
          registryUser: ~
          registryPasswd: ~
          registrySecret: ~

        longhornManager:
          log:
            ## Allowed values are `plain` or `json`.
            format: plain
          priorityClass: ~
          tolerations: []
          ## If you want to set tolerations for Longhorn Manager DaemonSet, delete the `[]` in the line above
          ## and uncomment this example block
          # - key: "key"
          #   operator: "Equal"
          #   value: "value"
          #   effect: "NoSchedule"
          nodeSelector: {}
          ## If you want to set node selector for Longhorn Manager DaemonSet, delete the `{}` in the line above
          ## and uncomment this example block
          #  label-key1: "label-value1"
          #  label-key2: "label-value2"
          serviceAnnotations: {}
          ## If you want to set annotations for the Longhorn Manager service, delete the `{}` in the line above
          ## and uncomment this example block
          #  annotation-key1: "annotation-value1"
          #  annotation-key2: "annotation-value2"

        longhornDriver:
          priorityClass: ~
          tolerations: []
          ## If you want to set tolerations for Longhorn Driver Deployer Deployment, delete the `[]` in the line above
          ## and uncomment this example block
          # - key: "key"
          #   operator: "Equal"
          #   value: "value"
          #   effect: "NoSchedule"
          nodeSelector: {}
          ## If you want to set node selector for Longhorn Driver Deployer Deployment, delete the `{}` in the line above
          ## and uncomment this example block
          #  label-key1: "label-value1"
          #  label-key2: "label-value2"

        longhornUI:
          replicas: 1
          priorityClass: ~
          tolerations: []
          ## If you want to set tolerations for Longhorn UI Deployment, delete the `[]` in the line above
          ## and uncomment this example block
          # - key: "key"
          #   operator: "Equal"
          #   value: "value"
          #   effect: "NoSchedule"
          nodeSelector: {}
          ## If you want to set node selector for Longhorn UI Deployment, delete the `{}` in the line above
          ## and uncomment this example block
          #  label-key1: "label-value1"
          #  label-key2: "label-value2"

        ingress:
          ## Set to true to enable ingress record generation
          enabled: false


        #  For Kubernetes < v1.25, if your cluster enables Pod Security Policy admission controller,
        #  set this to `true` to ship longhorn-psp which allow privileged Longhorn pods to start
        enablePSP: false

        ## Specify override namespace, specifically this is useful for using longhorn as sub-chart
        ## and its release namespace is not the `longhorn-system`
        namespaceOverride: "{{ .Values.longhorn.argocd.namespace }}"

        # Annotations to add to the Longhorn Manager DaemonSet Pods. Optional.
        annotations: {}

        serviceAccount:
          # Annotations to add to the service account
          annotations: {}
                
